apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: backend
    spec:
      containers:
        - name: postgres
          image: postgres:alpine
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-volume-mount
              mountPath: /var/lib/postgresql/data
          envFrom:
            - configMapRef:
                name: postgres-config
          resources:
              requests:
                cpu: 200m
                memory: 300Mi
              limits:
                cpu: 200m
                memory: 300Mi

      volumes:
        - name: postgres-volume-mount
          persistentVolumeClaim:
            claimName: postgres-pvc
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 200M # total capacity for this persistent volume
  accessModes:
    - ReadWriteOnce
  hostPath: # where pesistent volume is created on the kubernetes node (needs to be /data for minikube)
    path: "/data"
    
---
apiVersion: v1
kind: PersistentVolumeClaim #claim a portion of persistent volume
metadata:
  name: postgres-pvc
  labels:
    app: postgres-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce # mount as read-write by a single node
  resources:
    requests:
      storage: 100M # storage capacity cons

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres-config
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
  labels:
    app: postgres-svc
spec:
  type: LoadBalancer
  selector:
    app: postgres
  ports:
    - port: 5432 
      targetPort: 5432 
